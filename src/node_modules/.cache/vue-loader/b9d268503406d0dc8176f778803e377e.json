{"remainingRequest":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jakanddaxter/Documents/Vue-Applications/src/components/Autocomplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jakanddaxter/Documents/Vue-Applications/src/components/Autocomplete.vue","mtime":1557262084000},{"path":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// Reference: https://alligator.io/vuejs/vue-autocomplete-component/\n\nexport default {\n  name: 'autocomplete',\n\n  props: {\n    items: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  data() {\n    return {\n      search: '',       // the search text\n      isOpen: false,    // whether to display the search results\n      results: [],\n      arrowCounter: 0,  // to track the movement of arrow keys\n    };\n  },\n\n  mounted() {\n    document.addEventListener('click', this.handleClickOutside);\n  },\n\n  destroyed() {\n    document.removeEventListener('click', this.handleClickOutside);\n  },\n\n  watch: {\n    items: function (val, oldValue) {\n      if (val.length !== oldValue.length) {\n        this.results = val;\n      }\n    },\n  },\n\n  methods: {\n    onInput() {\n      this.filterResults();\n      this.isOpen = true;\n      this.$emit('input', this.search);\n    },\n\n    onChange() {\n      this.$emit('change', this.search);\n    },\n\n    onArrowDown() {\n      if (this.arrowCounter < this.results.length) {\n        this.arrowCounter = this.arrowCounter + 1;\n      }\n    },\n\n    onArrowUp() {\n      if (this.arrowCounter > 0) {\n        this.arrowCounter = this.arrowCounter -1;\n      }\n    },\n\n    onEnter() {\n      this.search = this.results[this.arrowCounter];\n      this.isOpen = false;\n      this.arrowCounter = -1;\n      this.onChange();\n    },\n\n    filterResults() {\n      this.results = this.items.filter(i => \n        i.toLowerCase().indexOf(this.search.toLowerCase()) > -1\n      );\n    },\n\n    selectResult(result) {\n      this.search = result;\n      this.isOpen = false;\n      this.onChange();\n    },\n\n    handleClickOutside(e) {\n      // close the dropdown result when click outside the results\n      if (!this.$el.contains(e.target)) {\n        this.isOpen = false;\n        this.arrowCounter = -1;\n      }\n    },\n  },\n}\n",{"version":3,"sources":["Autocomplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Autocomplete.vue","sourceRoot":"components","sourcesContent":["<template>\n  <div class=\"autocomplete\">\n    <input\n      type=\"text\"\n      placeholder=\"Search here...\"\n      v-model=\"search\"\n      @input=\"onInput\"\n      @change=\"onChange\"\n      @keydown.down=\"onArrowDown\"\n      @keydown.up=\"onArrowUp\"\n      @keydown.enter=\"onEnter\"\n      >\n    <ul class=\"autocomplete-results\" v-show=\"isOpen\">\n      <li\n        class=\"autocomplete-result\"\n        v-for=\"(result, index) in results\"\n        :key=\"index\"\n        @click=\"selectResult(result)\"\n        :class=\"{ 'is-active': index === arrowCounter }\"\n      >\n        {{ result }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n// Reference: https://alligator.io/vuejs/vue-autocomplete-component/\n\nexport default {\n  name: 'autocomplete',\n\n  props: {\n    items: {\n      type: Array,\n      default: () => [],\n    },\n  },\n\n  data() {\n    return {\n      search: '',       // the search text\n      isOpen: false,    // whether to display the search results\n      results: [],\n      arrowCounter: 0,  // to track the movement of arrow keys\n    };\n  },\n\n  mounted() {\n    document.addEventListener('click', this.handleClickOutside);\n  },\n\n  destroyed() {\n    document.removeEventListener('click', this.handleClickOutside);\n  },\n\n  watch: {\n    items: function (val, oldValue) {\n      if (val.length !== oldValue.length) {\n        this.results = val;\n      }\n    },\n  },\n\n  methods: {\n    onInput() {\n      this.filterResults();\n      this.isOpen = true;\n      this.$emit('input', this.search);\n    },\n\n    onChange() {\n      this.$emit('change', this.search);\n    },\n\n    onArrowDown() {\n      if (this.arrowCounter < this.results.length) {\n        this.arrowCounter = this.arrowCounter + 1;\n      }\n    },\n\n    onArrowUp() {\n      if (this.arrowCounter > 0) {\n        this.arrowCounter = this.arrowCounter -1;\n      }\n    },\n\n    onEnter() {\n      this.search = this.results[this.arrowCounter];\n      this.isOpen = false;\n      this.arrowCounter = -1;\n      this.onChange();\n    },\n\n    filterResults() {\n      this.results = this.items.filter(i => \n        i.toLowerCase().indexOf(this.search.toLowerCase()) > -1\n      );\n    },\n\n    selectResult(result) {\n      this.search = result;\n      this.isOpen = false;\n      this.onChange();\n    },\n\n    handleClickOutside(e) {\n      // close the dropdown result when click outside the results\n      if (!this.$el.contains(e.target)) {\n        this.isOpen = false;\n        this.arrowCounter = -1;\n      }\n    },\n  },\n}\n</script>\n\n<style>\n  .autocomplete {\n    position: relative;\n  }\n\n  .autocomplete-results {\n    padding: 0;\n    margin: 0;\n    border: 1px solid #eeeeee;\n    height: 120px;\n    overflow: auto;\n    width: 100%;\n  }\n\n  .autocomplete-result {\n    list-style: none;\n    text-align: left;\n    padding: 4px 2px;\n    cursor: pointer;\n  }\n\n  .autocomplete-result.is-active,\n  .autocomplete-result:hover {\n    background-color: #4AAE9B;\n    color: white;\n  }\n</style>\n"]}]}