{"remainingRequest":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jakanddaxter/Documents/Vue-Applications/src/components/Form1.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jakanddaxter/Documents/Vue-Applications/src/components/Form1.vue","mtime":1557262084000},{"path":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jakanddaxter/Documents/Vue-Applications/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Autocomplete from './Autocomplete';\nimport { mapFields } from 'vuex-map-fields';\n\nexport default {\n  components: {\n    Autocomplete,\n  },\n\n  data() {\n    return {\n      storeTypes: [\n        'Mall',\n        'Metro',\n        'Arcade',\n        'Centre',\n      ],\n      users: [],\n      errors: {},       // for form validation\n    };\n  },\n\n  computed: {\n    ...mapFields([\n      'form.storeType',\n      'form.storeDetail',\n      'form.fullName',\n      'form.firstName',\n      'form.lastName',\n    ]),\n  },\n\n  mounted() {\n    fetch('https://randomuser.me/api/?results=50&nat=au&exc=login')\n      .then(res => res.json())\n      .then(res => {\n        this.users = res.results.map(u => `${u.name.first} ${u.name.last}`);\n      })\n      .catch(() => {});\n  },\n\n  methods: {\n    next() {\n      if (this.validateForm()) {\n        this.$router.push('/form2');\n      }\n    },\n\n    onFullNameSelected(name) {\n      this.fullName = name;\n      [this.firstName, this.lastName] = name.split(' ', 2);\n    },\n\n    // Validate form and return true if everything is ok\n    validateForm() {\n      this.errors = [];\n\n      if (!this.storeType) {\n        this.errors['storeType'] = 'Store type is required';\n      }\n\n      if (this.storeType === 'Metro' && this.storeDetail.trim() === '') {\n        this.errors['storeDetail'] = 'Store details are required for Metro type';\n      }\n\n      if (!this.fullName) {\n        this.errors['fullName'] = 'Full name is required';\n      }\n\n      if (!this.firstName) {\n        this.errors['firstName'] = 'First name is required';\n      }\n\n      if (!this.lastName) {\n        this.errors['lastName'] = 'Last name is required';\n      }\n\n      return Object.keys(this.errors).length === 0;\n    },\n  },\n}\n",{"version":3,"sources":["Form1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Form1.vue","sourceRoot":"components","sourcesContent":["<template>\n  <div class=\"ui centered card\">\n    <h1 class=\"ui header\">Page 1</h1>\n\n    <div class=\"content\">\n      <div class=\"ui form\">\n        <!-- Store info -->\n        <fieldset class=\"ui segment fields\">\n          <div class=\"field\">\n            <label>Store Type</label>\n            <select v-model=\"storeType\">\n              <option\n                v-for=\"(option, index) in storeTypes\"\n                :key=\"index\"\n                :value=\"option\"\n              >\n                {{ option }}\n              </option>\n            </select>\n            <div class=\"ui pointing red basic label\" v-show=\"errors['storeType']\">\n              {{ errors['storeType'] }}\n            </div>\n          </div>\n\n          <div class=\"field\" v-show=\"storeType === 'Metro'\">\n            <label>Store Detail</label>\n            <input type=\"text\" v-model=\"storeDetail\">\n            <div class=\"ui pointing red basic label\" v-show=\"errors['storeDetail']\">\n              {{ errors['storeDetail'] }}\n            </div>\n          </div>\n        </fieldset>\n\n        <!-- User info -->\n        <fieldset class=\"ui segment fields\">\n          <div class=\"field\">\n            <label>Name lookup</label>\n            <autocomplete\n              :items=\"users\"\n              @change=\"onFullNameSelected\"\n            ></autocomplete>\n            <div class=\"ui pointing red basic label\" v-show=\"errors['fullName']\">\n              {{ errors['fullName'] }}\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label>First Name</label>\n            <input type=\"text\" v-model=\"firstName\">\n            <div class=\"ui pointing red basic label\" v-show=\"errors['firstName']\">\n              {{ errors['firstName'] }}\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label>Last Name</label>\n            <input type=\"text\" v-model=\"lastName\">\n            <div class=\"ui pointing red basic label\" v-show=\"errors['lastName']\">\n              {{ errors['lastName'] }}\n            </div>\n          </div>\n        </fieldset>\n\n        <div class=\"ui buttons\">\n          <button class=\"ui disabled button\" disabled>\n            Back\n          </button>\n          <button class=\"ui primary button\" @click=\"next()\">\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Autocomplete from './Autocomplete';\nimport { mapFields } from 'vuex-map-fields';\n\nexport default {\n  components: {\n    Autocomplete,\n  },\n\n  data() {\n    return {\n      storeTypes: [\n        'Mall',\n        'Metro',\n        'Arcade',\n        'Centre',\n      ],\n      users: [],\n      errors: {},       // for form validation\n    };\n  },\n\n  computed: {\n    ...mapFields([\n      'form.storeType',\n      'form.storeDetail',\n      'form.fullName',\n      'form.firstName',\n      'form.lastName',\n    ]),\n  },\n\n  mounted() {\n    fetch('https://randomuser.me/api/?results=50&nat=au&exc=login')\n      .then(res => res.json())\n      .then(res => {\n        this.users = res.results.map(u => `${u.name.first} ${u.name.last}`);\n      })\n      .catch(() => {});\n  },\n\n  methods: {\n    next() {\n      if (this.validateForm()) {\n        this.$router.push('/form2');\n      }\n    },\n\n    onFullNameSelected(name) {\n      this.fullName = name;\n      [this.firstName, this.lastName] = name.split(' ', 2);\n    },\n\n    // Validate form and return true if everything is ok\n    validateForm() {\n      this.errors = [];\n\n      if (!this.storeType) {\n        this.errors['storeType'] = 'Store type is required';\n      }\n\n      if (this.storeType === 'Metro' && this.storeDetail.trim() === '') {\n        this.errors['storeDetail'] = 'Store details are required for Metro type';\n      }\n\n      if (!this.fullName) {\n        this.errors['fullName'] = 'Full name is required';\n      }\n\n      if (!this.firstName) {\n        this.errors['firstName'] = 'First name is required';\n      }\n\n      if (!this.lastName) {\n        this.errors['lastName'] = 'Last name is required';\n      }\n\n      return Object.keys(this.errors).length === 0;\n    },\n  },\n}\n</script>\n"]}]}